{
  "questions": [
    {
      "level": "Junior",
      "question": "Which keyword is used to define a constant variable in C#?",
      "answers": {
        "a": "let",
        "b": "const",
        "c": "readonly",
        "d": "static"
      },
      "correctAnswer": "b"
    },
    {
      "level": "Junior",
      "question": "What is the primary purpose of an abstract class?",
      "answers": {
        "a": "To be instantiated directly to create objects.",
        "b": "To provide a base class from which other classes can be derived.",
        "c": "To prevent a class from being inherited.",
        "d": "To declare a class that has only static members."
      },
      "correctAnswer": "b"
    },
    {
      "level": "Junior",
      "question": "Which collection in C# ensures that all its elements are unique?",
      "answers": {
        "a": "List<T>",
        "b": "Queue<T>",
        "c": "Dictionary<TKey, TValue>",
        "d": "HashSet<T>"
      },
      "correctAnswer": "d"
    },
    {
      "level": "Junior",
      "question": "In C# exception handling, which block is executed only if an exception occurs?",
      "answers": {
        "a": "try",
        "b": "finally",
        "c": "catch",
        "d": "throw"
      },
      "correctAnswer": "c"
    },
    {
      "level": "Junior",
      "question": "How do you correctly call a method named 'Calculate' on an instance 'calc' of a 'Calculator' class?",
      "answers": {
        "a": "Calculator.Calculate();",
        "b": "calc.Calculate();",
        "c": "new Calculator.Calculate();",
        "d": "Calculate(calc);"
      },
      "correctAnswer": "b"
    },
    {
      "level": "Junior",
      "question": "Why is string concatenation using the '+' operator in a loop often discouraged in C#?",
      "answers": {
        "a": "It can lead to syntax errors.",
        "b": "It creates a new string object in memory for each concatenation.",
        "c": "It is not thread-safe.",
        "d": "It only works with string literals."
      },
      "correctAnswer": "b"
    },
    {
      "level": "Junior",
      "question": "Which of the following are reference types in C#?",
      "answers": {
        "a": "int",
        "b": "double",
        "c": "string",
        "d": "object"
      },
      "correctAnswer": [
        "c",
        "d"
      ]
    },
    {
      "level": "Junior",
      "question": "If an algorithm's time complexity is O(n), how does the execution time change as the input size 'n' doubles?",
      "answers": {
        "a": "It stays the same.",
        "b": "It doubles.",
        "c": "It quadruples.",
        "d": "It is halved."
      },
      "correctAnswer": "b"
    },
    {
      "level": "Junior",
      "question": "Which keyword allows a derived class to provide a specific implementation of a method that is already provided by its base class?",
      "answers": {
        "a": "virtual",
        "b": "override",
        "c": "new",
        "d": "base"
      },
      "correctAnswer": "b"
    },
    {
      "level": "Junior",
      "question": "What is the key difference between 'struct' and 'class' in C#?",
      "answers": {
        "a": "Structs are reference types, and classes are value types.",
        "b": "Structs do not support methods.",
        "c": "Structs are value types, and classes are reference types.",
        "d": "Structs cannot have constructors."
      },
      "correctAnswer": "c"
    },
    {
      "level": "Junior",
      "question": "Which data structure follows the FIFO (First-In, First-Out) principle?",
      "answers": {
        "a": "Stack",
        "b": "Queue",
        "c": "List",
        "d": "Dictionary"
      },
      "correctAnswer": "b"
    },
    {
      "level": "Junior",
      "question": "Can a class implement multiple interfaces in C#?",
      "answers": {
        "a": "No, a class can only implement one interface.",
        "b": "Yes, a class can implement multiple interfaces.",
        "c": "Only if the interfaces have no methods in common.",
        "d": "Only if the class is marked as 'sealed'."
      },
      "correctAnswer": "b"
    },
    {
      "level": "Junior",
      "question": "Which of the following are considered value types in C#?",
      "answers": {
        "a": "string",
        "b": "bool",
        "c": "struct",
        "d": "Array"
      },
      "correctAnswer": [
        "b",
        "c"
      ]
    },
    {
      "level": "Junior",
      "question": "Which keyword is used in C# to define a method that does not return a value?",
      "answers": {
        "a": "null",
        "b": "return",
        "c": "void",
        "d": "empty"
      },
      "correctAnswer": "c"
    },
    {
      "level": "Junior",
      "question": "When is it appropriate to use a 'switch' statement?",
      "answers": {
        "a": "To replace any 'if-else' statement.",
        "b": "When checking a variable against a series of constant values.",
        "c": "For complex boolean expressions.",
        "d": "When you need to loop through a collection."
      },
      "correctAnswer": "b"
    },
    {
      "level": "Junior",
      "question": "What is polymorphism in object-oriented programming?",
      "answers": {
        "a": "The ability of an object to take on many forms.",
        "b": "The process of hiding the internal state of an object.",
        "c": "The creation of a new class from an existing class.",
        "d": "The bundling of data and methods that operate on the data into a single unit."
      },
      "correctAnswer": "a"
    },
    {
      "level": "Junior",
      "question": "Which method is called when an object is created from a class?",
      "answers": {
        "a": "The Finalize method",
        "b": "The Initialize method",
        "c": "The Constructor",
        "d": "The Dispose method"
      },
      "correctAnswer": "c"
    },
    {
      "level": "Junior",
      "question": "What is a potential problem with an infinite loop?",
      "answers": {
        "a": "It will cause a compilation error.",
        "b": "It will make the program consume excessive resources and become unresponsive.",
        "c": "It automatically throws a TimeoutException.",
        "d": "It corrupts the computer's memory."
      },
      "correctAnswer": "b"
    },
    {
      "level": "Junior",
      "question": "Which SOLID principle suggests that a class should have only one reason to change?",
      "answers": {
        "a": "Open/Closed Principle",
        "b": "Liskov Substitution Principle",
        "c": "Single Responsibility Principle",
        "d": "Dependency Inversion Principle"
      },
      "correctAnswer": "c"
    },
    {
      "level": "Junior",
      "question": "What is the primary benefit of using LINQ (Language Integrated Query) in C#?",
      "answers": {
        "a": "To make the code compile faster.",
        "b": "To provide a consistent way to query data from different sources.",
        "c": "To automatically handle exceptions.",
        "d": "To enforce strong typing on all variables."
      },
      "correctAnswer": "b"
    }
  ]
}